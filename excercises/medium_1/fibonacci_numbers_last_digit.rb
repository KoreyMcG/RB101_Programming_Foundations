def fibonacci_last(n)
  array = [1, 1]                                           # => [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]
  3.upto(n) do |i|                                         # => 3,      3,      3,      3,      3,      3
    array = [array.last, (array.first + array.last) % 10]  # => [1, 2], [2, 3], [3, 5], [5, 8], [8, 3], [3, 1], [1, 4], [4, 5], [5, 9], [9, 4], [4, 3], [3, 7], [7, 0], [1, 2], [2, 3], [3, 5], [5, 8], [8, 3], [3, 1], [1, 4], [4, 5], [5, 9], [9, 4], [4, 3], [3, 7], [7, 0], [0, 7], [7, 7], [7, 4], [4, 1], [1, 5], [1, 2], [2, 3], [3, 5], [5, 8], [8, 3], [3, 1], [1, 4], [4, 5], [5, 9], [9, 4], [4, 3], [3, 7], [7, 0], [0, 7], [7, 7], [7, 4], [4, 1], [1, 5], [5, 6], [6, 1], [1, 7], [7, 8], [8, 5], [...
  end                                                      # => 3, 3, 3, 3, 3, 3
  array.last                                               # => 0, 5, 5, 1, 3, 4
end                                                        # => :fibonacci_last


fibonacci_last(15)         # => 0
fibonacci_last(20)         # => 5
fibonacci_last(100)        # => 5
fibonacci_last(100_001)    # => 1
fibonacci_last(1_000_007)  # => 3
fibonacci_last(123456789)  # => 4
